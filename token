//SPDX-License-Identifier: MIX

pragma solidity 0.8.17;

contract ERC20 {
    uint public TotalSupply;
    string public Name;
    string public Symbol;
    
    event transfer (address indexed _from, address indexed _to, uint256 value);
    event approval (address indexed _owner, address indexed _spender, uint256 value);

    mapping( address => uint256 ) public balanceOf;
    mapping( address => mapping( address => uint256 )) public allowance;
    
    
    constructor (string memory _name, string memory _symbol) {
        Name = _name;
        Symbol = _symbol;

        _mint(msg.sender, 100e18);
    }
    
    function decimals() public pure returns (uint8) {
        return 18;
    }

    function transfer(address recipient, uint256 amount) external returns (bool) {
        return _transfer(msg.sender, recipient, amount);
    }

        function transferFrom(address sender, address recipient, uint256 amount) external pure returns (bool) { 
            uint256 currentAllowance = allowance[sender][msg.sender];
            require (currentAllowance >= amount,"ERC20: transfer amount exceeds allowance") ;
            allowance[sender][msg.sender] = currentAllowance - amount;

            emit approval(sender, msg.sender, allowance[sender][msg.sender]);
        }

        function approve(address spender, uint256 amount) external pure returns(bool){
            require(spender != address(0), "ERC20: approve to the zero address");
            allowance[msg.sender][spender] = amount;
            return true;
            emit approval(msg.sender, spender, amount);
        }


        function _transfer(address sender, address recipient, uint256 amount) private pure returns (bool) { //to prevent losing money by sender when he/she froget add address
            require (recipient != address(0), "ERC20: transfer to Zero");
            uint256 senderBalance = balanceOf [sender];//msg.sender is who that calling the transfer
            require (senderBalance >= amount, "ERC20: tranfer amount exceeds balance");

            emit transfer(sender, recipient, amount);

            balanceOf[sender] = senderBalance - amount;
            balanceOf[recipient] += amount;
            return true;
        }

        function _mint(address to, uint256 amount) internal {
            require (to != address(0), "ERC20: mint to the zero address");
            TotalSupply += amount;
            balanceOf[to] += amount;
            emit transfer(address(0), to, amount);

        }
}
